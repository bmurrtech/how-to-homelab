#cloud-config
package_update: true
package_upgrade: true
ssh_pwauth: false
disable_root: true

packages:
  - curl
  - wget
  - qrencode
  - wireguard
  - wireguard-tools
  - iptables

write_files:
  # Enable forwarding early
  - path: /etc/sysctl.d/99-wireguard.conf
    owner: root:root
    permissions: '0644'
    content: |
      net.ipv4.ip_forward = 1
      net.ipv6.conf.all.forwarding = 1

  - path: /opt/wg-selfhost.sh
    owner: root:root
    permissions: '0750'
    content: |
      #!/bin/bash
      set -euo pipefail
      export DEBIAN_FRONTEND=noninteractive

      # ---- discover defaults ----
      DEFAULT_USER="$(id -nu 1000 2>/dev/null || echo ubuntu)"
      USER_HOME="$(getent passwd "$DEFAULT_USER" | cut -d: -f6)"
      OWNER_HOME="$USER_HOME"
      WG_DIR="$OWNER_HOME/.wireguard"
      WG_ETC="/etc/wireguard"
      WG_IF="wg0"
      WG_NET="10.7.0.0/24"
      WG_ADDR="10.7.0.1/24"
      WG_PORT="51820"
      EGRESS_NIC="$(ip route show default 2>/dev/null | awk '{print $5}' | head -n1)"
      [ -n "$EGRESS_NIC" ] || EGRESS_NIC="$(ls -1 /sys/class/net | grep -v -E 'lo|wg.*' | head -n1)"
      SERVER_IP="$(curl -fsS -4 http://checkip.amazonaws.com || hostname -I | awk '{print $1}')"

      echo "[1/5] Updating apt & installing packages..."
      apt-get update -qq
      apt-get install -y -qq wireguard wireguard-tools qrencode curl iptables >/dev/null

      echo "[2/5] Enabling forwarding..."
      sysctl --system >/dev/null 2>&1 || true

      echo "[3/5] Generating server keys (not printed)..."
      umask 077
      mkdir -p "$WG_ETC"
      if [ ! -f "$WG_ETC/server_private.key" ]; then
        wg genkey | tee "$WG_ETC/server_private.key" | wg pubkey > "$WG_ETC/server_public.key"
        chmod 600 "$WG_ETC"/server_*.key
      fi
      SERVER_PRIV="$(cat "$WG_ETC/server_private.key")"

      echo "[4/5] Writing server config..."
      if [ ! -f "$WG_ETC/$WG_IF.conf" ]; then
        cat > "$WG_ETC/$WG_IF.conf" <<EOF
      [Interface]
      PrivateKey = ${SERVER_PRIV}
      Address = ${WG_ADDR}
      ListenPort = ${WG_PORT}
      # NAT and forwarding (iptables-nft on Ubuntu 24.04)
      PostUp = iptables -t nat -A POSTROUTING -o ${EGRESS_NIC} -s ${WG_NET} -j MASQUERADE
      PostUp = iptables -A FORWARD -i ${EGRESS_NIC} -o ${WG_IF} -m state --state RELATED,ESTABLISHED -j ACCEPT
      PostUp = iptables -A FORWARD -i ${WG_IF} -o ${EGRESS_NIC} -j ACCEPT
      PreDown = iptables -t nat -D POSTROUTING -o ${EGRESS_NIC} -s ${WG_NET} -j MASQUERADE
      PreDown = iptables -D FORWARD -i ${EGRESS_NIC} -o ${WG_IF} -m state --state RELATED,ESTABLISHED -j ACCEPT
      PreDown = iptables -D FORWARD -i ${WG_IF} -o ${EGRESS_NIC} -j ACCEPT
      EOF
        chmod 600 "$WG_ETC/$WG_IF.conf"
      fi

      echo "[5/5] Enabling service..."
      systemctl enable wg-quick@"$WG_IF" >/dev/null
      systemctl restart wg-quick@"$WG_IF" >/dev/null || systemctl start wg-quick@"$WG_IF" >/dev/null

      echo "[INFO] Preparing client dir..."
      install -d -m 700 "$WG_DIR"
      chown "$DEFAULT_USER:$DEFAULT_USER" "$WG_DIR"

      # ---------- Helpers (sudo-only) ----------
      # Common: resolve sudo caller's home
      resolve_owner_home='OWNER="${SUDO_USER:-$USER}"; OWNER_HOME="$(getent passwd "$OWNER" | cut -d: -f6)"'

      # wg-add <name>
      cat > /usr/local/sbin/wg-add <<'EOC'
      #!/bin/bash
      set -euo pipefail
      [ "$EUID" -eq 0 ] || { echo "Use: sudo wg-add <client-name>"; exit 1; }
      [ $# -eq 1 ] || { echo "Usage: sudo wg-add <client-name>"; exit 1; }
      NAME="$1"
      WG_IF="wg0"; WG_ETC="/etc/wireguard"; WG_NET="10.7.0.0/24"; WG_PORT="$(grep -m1 ListenPort $WG_ETC/$WG_IF.conf | awk '{print $3}')"
      SERVER_PUB="$(awk '/^\[Interface\]/{f=1} f&&/^PrivateKey/{print $3; exit}' "$WG_ETC/$WG_IF.conf" | wg pubkey)"
      ENDPOINT_IP="$(curl -fsS -4 http://checkip.amazonaws.com || hostname -I | awk "{print \$1}")"
      OWNER="${SUDO_USER:-$USER}"; OWNER_HOME="$(getent passwd "$OWNER" | cut -d: -f6)"; DST="$OWNER_HOME/.wireguard"
      install -d -m 700 "$DST"

      # next IP (defaults to .2 if none)
      LAST=$(grep -E 'AllowedIPs *= *10\.7\.0\.[0-9]+/32' -o "$WG_ETC/$WG_IF.conf" | awk -F. '{print $4}' | cut -d/ -f1 | sort -n | tail -n1 || true)
      [ -n "${LAST:-}" ] || LAST=1
      HOST=$((LAST + 1))
      C_IP="10.7.0.${HOST}"

      PRIV="$(wg genkey)"; PUB="$(printf '%s' "$PRIV" | wg pubkey)"; PSK="$(wg genpsk)"

      # append peer (idempotent marker)
      if ! grep -q "^# BEGIN_PEER ${NAME}$" "$WG_ETC/$WG_IF.conf"; then
        {
          echo ""
          echo "# BEGIN_PEER ${NAME}"
          echo "[Peer]"
          echo "PublicKey = ${PUB}"
          echo "PresharedKey = ${PSK}"
          echo "AllowedIPs = ${C_IP}/32"
          echo "# END_PEER ${NAME}"
        } >> "$WG_ETC/$WG_IF.conf"
      fi

      # write client file
      cat > "$DST/${NAME}.conf" <<CFG
      [Interface]
      PrivateKey = ${PRIV}
      Address = ${C_IP}/24
      DNS = 1.1.1.1

      [Peer]
      PublicKey = ${SERVER_PUB}
      PresharedKey = ${PSK}
      Endpoint = ${ENDPOINT_IP}:${WG_PORT}
      AllowedIPs = 0.0.0.0/0, ::/0
      PersistentKeepalive = 25
      CFG
      chmod 600 "$DST/${NAME}.conf"
      chown -R "$OWNER:$OWNER" "$DST"

      systemctl restart wg-quick@"$WG_IF" >/dev/null 2>&1 || true
      echo "Created ${NAME}: $DST/${NAME}.conf"
      EOC

      # wg-qr <name>
      cat > /usr/local/sbin/wg-qr <<'EOC'
      #!/bin/bash
      set -euo pipefail
      [ "$EUID" -eq 0 ] || { echo "Use: sudo wg-qr <client-name>"; exit 1; }
      [ $# -eq 1 ] || { echo "Usage: sudo wg-qr <client-name>"; exit 1; }
      OWNER="${SUDO_USER:-$USER}"; OWNER_HOME="$(getent passwd "$OWNER" | cut -d: -f6)"
      CONF="$OWNER_HOME/.wireguard/$1.conf"
      command -v qrencode >/dev/null 2>&1 || { echo "qrencode not installed"; exit 1; }
      [ -f "$CONF" ] || { echo "Config not found: $CONF"; exit 1; }
      exec qrencode -t ansiutf8 < "$CONF"
      EOC

      # wg-show (status passthrough)
      cat > /usr/local/sbin/wg-show <<'EOC'
      #!/bin/bash
      exec sudo wg show
      EOC

      # wg-remove <name>
      cat > /usr/local/sbin/wg-remove <<'EOC'
      #!/bin/bash
      set -euo pipefail
      [ "$EUID" -eq 0 ] || { echo "Use: sudo wg-remove <client-name>"; exit 1; }
      [ $# -eq 1 ] || { echo "Usage: sudo wg-remove <client-name>"; exit 1; }
      NAME="$1"; WG_ETC="/etc/wireguard"; IFACE="wg0"
      sed -i "/^# BEGIN_PEER ${NAME}\$/,/^# END_PEER ${NAME}\$/d" "$WG_ETC/$IFACE.conf"
      OWNER="${SUDO_USER:-$USER}"; OWNER_HOME="$(getent passwd "$OWNER" | cut -d: -f6)"; rm -f "$OWNER_HOME/.wireguard/${NAME}.conf"
      systemctl restart wg-quick@"$IFACE" >/dev/null 2>&1 || true
      echo "Removed ${NAME}"
      EOC

      # wg-rotate <name>
      cat > /usr/local/sbin/wg-rotate <<'EOC'
      #!/bin/bash
      set -euo pipefail
      [ "$EUID" -eq 0 ] || { echo "Use: sudo wg-rotate <client-name>"; exit 1; }
      [ $# -eq 1 ] || { echo "Usage: sudo wg-rotate <client-name>"; exit 1; }
      NAME="$1"
      sudo wg-remove "$NAME" >/dev/null
      sudo wg-add "$NAME"
      echo "Rotated keys for ${NAME}"
      EOC

      chmod 750 /usr/local/sbin/wg-*

      # README for both root and default user
      cat > "$USER_HOME/README-WG.txt" <<'EOF'
      WireGuard VPN Management (OCI)
      ==============================
      Status:
        sudo wg-show

      Add a client:
        sudo wg-add <client-name>

      Show QR for a client:
        sudo wg-qr <client-name>

      Rotate client keys:
        sudo wg-rotate <client-name>

      Remove a client:
        sudo wg-remove <client-name>

      Files:
        Server config: /etc/wireguard/wg0.conf
        Client configs: ~/.wireguard/<client>.conf  (created for the user who runs wg-add)

      Notes:
        • Keep .conf files private (contain private keys).
        • OCI Security List / NSG must allow UDP/51820 to this instance.
        • Endpoint defaults to your public IPv4 detected at setup.
      EOF
      chown "$DEFAULT_USER:$DEFAULT_USER" "$USER_HOME/README-WG.txt"
      cp "$USER_HOME/README-WG.txt" /root/README-WG.txt

runcmd:
  - [ sysctl, --system ]
  - [ chmod, +x, /opt/wg-selfhost.sh ]
  - [ bash, -lc, '/opt/wg-selfhost.sh' ]
